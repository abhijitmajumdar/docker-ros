#!/usr/bin/env bash

HELP="
A wrapper around ROS commands, which launches all ROS related tools inside a container. You do not need to install any
other dependencies other than docker

Usage:
    
    Help:

        docker-ros
    
    Execution commands:

        docker-ros COMMAND

    Special commands:

        docker-ros start
        docker-ros stop
        docker-ros add PKGA <PKGB> ...
        docker-ros clear
        docker-ros distro <DISTRO>

    Completion:

        docker-ros rostopic <TAB> <TAB> <TAB>

        docker-ros roscore
        docker-ros rostopic echo <TAB> <TAB> <TAB>

Examples:
    
    start rosmaster:
    
        docker-ros roscore

    rostopic and rosservice commands:
    
        docker-ros rostopic list
        docker-ros rosservice list

    lanuch ros GUIs:
    
        docker-ros rosrun rqt_reconfigure rqt_reconfigure
        docker-ros rosrun rviz rviz

    run ros commands with rosmaster running on a remote host (replace <REMOTE_HOST> with hostname or IP address of 
    remote). NOTE: you need to do a 1-time-action of adding the hostname with its IP address to your /etc/hosts:
    
        docker-ros ROS_MASTER_URI=http://<REMOTE_HOST>:11311 rostopic list

    start the docker-ros container (this is automatically done when running any other command, does not need to be
    called explicitly)
        
        docker-ros start
    
    stop the docker-ros container, this can be done to stop and remove the container at any point
    
        docker-ros stop

    add (ros or other from apt sources) package(s) to the image
        
        docker-ros add ros-noetic-swri-console ros-noetic-realsense2-camera nano

    lanuch usb based camera driver (connect a realsense camera over USB to system for this example)
    
        docker-ros add ros-noetic-realsense2-camera
        docker-ros roslaunch realsense2_camera rs_camera.launch
        docker-ros rosrun rviz rviz

    switch ros distro between noetic, melodic or kinetic. NOTE: this clears all packages installed, you will need to
    rerun docker-ros add <PKGS> to add them after this step
    
        docker-ros distro melodic

    Clear all configurations
    
        docker-ros clear
"

DEFAULT_ROS_DISTRO="noetic"
DEFAULT_PKGS="bash-completion nano less"
ROS_IMAGE="docker-ros:custom"

_configure_loc(){
    if [ ! -d ~/.config/docker_ros ]; then
        mkdir -p ~/.config/docker_ros
    fi
}

_init(){
    _configure_loc

    if [ ! -f ~/.config/docker_ros/ros_distro ]; then
        echo "$DEFAULT_ROS_DISTRO" > ~/.config/docker_ros/ros_distro
    fi

    if [ ! -f ~/.config/docker_ros/packages ]; then
        echo "$DEFAULT_PKGS" > ~/.config/docker_ros/packages
    fi
}

_deinit(){
    if [ -d ~/.config/docker_ros ]; then
        rm -rf ~/.config/docker_ros
    fi
}

_get_ros_distro(){
    cat ~/.config/docker_ros/ros_distro
}

_get_base_image(){
    echo "osrf/ros:$(_get_ros_distro)-desktop-full"
}

_get_packages(){
    cat ~/.config/docker_ros/packages
}

_retag_base_image(){
    docker pull $(_get_base_image)
    docker tag $(_get_base_image) $ROS_IMAGE
}

_ros_image_nonexistant(){
    [ -z "$(docker images -q --filter reference=docker-ros:custom)" ]
}

_not_running(){
    [ -z "$(docker ps -q --filter name=docker-ros)" ]
}

_running(){
    [ ! -z "$(docker ps -q --filter name=docker-ros)" ]
}

_start(){
    if _running; then
        return
    fi

    if _ros_image_nonexistant; then
        _retag_base_image
        _install_configured_packages
    fi

    echo "Starting docker-ros container"
    GET_COMPLETION_PATH=/usr/local/share/docker_ros/get_completions
    if [ ! -f $GET_COMPLETION_PATH ]; then
        GET_COMPLETION_PATH=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/get_completions
    fi
    docker run -d \
        --name docker-ros \
        --network host \
        --ipc host \
        -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
        --privileged \
        -v /dev/bus/usb:/dev/bus/usb \
        -v $GET_COMPLETION_PATH:/root/get_completions:ro \
        $ROS_IMAGE \
        bash -c "while true; do sleep 1000; done" > /dev/null
}

_stop(){
    if _not_running; then
        return
    fi

    docker stop docker-ros > /dev/null
    docker rm docker-ros > /dev/null
}

_install_configured_packages(){
    if _running; then
        _stop
    fi

    BASE_IMAGE="$(_get_base_image)"
    FINAL_IMAGE="$ROS_IMAGE"
    PKGS="$(_get_packages)"

    if [ -z "$PKGS" ]; then
        return
    fi

    echo "installing following packages to $BASE_IMAGE to form $FINAL_IMAGE: $PKGS"
    docker run \
        --name docker-ros \
        -e PKGS \
        $BASE_IMAGE \
        bash -c "apt update && apt install -y $PKGS && rm -rf /var/lib/apt/lists/*"
    docker commit docker-ros $FINAL_IMAGE
    docker rm docker-ros
}

_add(){
    if _running; then
        _stop
    fi

    if [ -z $1 ]; then
        echo "must specify atleast 1 package to be added to the image"
        exit 1
    fi

    PKGS=`echo "$(_get_packages) $@" | xargs -n1 | sort -u | xargs`
    
    if [ -z "$PKGS" ]; then
        _retag_base_image
        exit 0
    fi

    echo "$PKGS" > ~/.config/docker_ros/packages

    _install_configured_packages 
}

_clear(){
    if _running; then
        _stop
    fi

    _deinit
    docker rmi $ROS_IMAGE
}

_distro(){
    if [ -z $1 ] || { [ "$1" != "noetic" ] && [ "$1" != "melodic" ] && [ "$1" != "kinetic" ]; }; then
        echo "must specify a valid ROS distro from 'noetic', 'melodic', 'kinetic'"
        exit 1
    fi

    if _running; then
        _stop
    fi

    _deinit
    _init
    echo "$1" > ~/.config/docker_ros/ros_distro
    _retag_base_image
    _install_configured_packages
}

_command(){
    _init

    COMMAND="$@"

    if [ -z "$COMMAND" ]; then
        printf '%s' "$HELP"
        exit 1
    fi
    
    # Explicit commands
    if [ "$COMMAND" == "start" ]; then
        _start
        exit 0
    elif [ "$COMMAND" == "stop" ]; then
        _stop
        exit 0
    elif [ "$#" -ge 1 ] && [ "$1" == "add" ]; then
        shift
        _add $@
        exit 0
    elif [ "$COMMAND" == "clear" ]; then
        _clear
        exit 0
    elif [ "$1" == "distro" ]; then
        _distro $2
        exit 0
    fi

    # If user only passes (ros or other) commands, launch container if not already running
    _start

    # Execute the command in the container, with an interactive session to enable user keypresses
    ROS_DISTRO=$(_get_ros_distro)
    xhost +local:root > /dev/null
    docker exec -it \
        -e QT_X11_NO_MITSHM=1 \
        -e DISPLAY \
        -e ROS_DISTRO \
        -e COMMAND \
        docker-ros \
        bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && source /root/get_completions && $COMMAND"
    xhost -local:root > /dev/null
}

_command "$@"
